;(require "./ch05-4")
(require "./ch06-2")
(use gauche.test)

(test-start "ยง6.2 A Pattern-Matching Tool")
(test-section "pp.179-180")
(test* "" '((?n . 34))
	   (pat-match '(x = (?is ?n number?)) '(x = 34)))
(test* "" '()
	   (pat-match '(x = (?is ?n number?)) '(x = x)))
(test* "" '((?y . 4) (?x . 3))
	   (pat-match '(?x (?or < = >) ?y) '(3 < 4)))
(test* "" '((?n . 3))
	   (pat-match '(x = (?and (?is ?n number?) (?is ?n odd?)))
				  '(x = 3)))
(test* "" '((?x . 3))
	   (pat-match '(?x /= (?not ?x)) '(3 /= 4)))
(test* "" '((?y . 3) (?x . 4))
	   (pat-match '(?x > ?y (?if (> ?x ?y))) '(4 > 3)))

(test-section "pp.185-186")
(test* "" '((?x b c))
	   (pat-match '(a (?* ?x) d) '(a b c d)))
(test* "" '((?y b c) (?x))
	   (pat-match '(a (?* ?x) (?* ?y) d) '(a b c d)))
(test* "" '((?y d) (?x b c))
	   (pat-match '(a (?* ?x) (?* ?y) ?x ?y)
				  '(a b c d (b c) (d))))

(test-section "?op")
(test* "" '((?z . 7) (?y . 4) (?op . +) (?x . 3))
	   (pat-match '(?x ?op ?y is ?z (?if (eqv? (?op ?x ?y) ?z)))
				  '(3 + 4 is 7)))
(test* "" #f ;;'()
	   (pat-match '(?x ?op ?y (?if (?op ?x ?y)))
				  '(3 > 4)))

(test-section "pat-match-abbrev")
(pat-match-abbrev '?x* '(?* ?x))
(pat-match-abbrev '?y* '(?* ?y))

(define axyd (expand-pat-match-abbrev '(a ?x* ?y* d)))
(test* "(expand-pat-match-abbrev)" '(a (?* ?x) (?* ?y) d) axyd)
(test* "" '((?y b c) (?x))
	   (pat-match axyd '(a b c d)))
#|
(test-section "(())")
(test* "" '((?z . 1) (?y . 2) (?x . 3))
	   (pat-match '(?x (?y (?z 0)))
				  '(3 (2 (1 0)))))
|#
(test-end)

(define (use-eliza-rules input)
  (rule-based-translator input
						 (map (lambda (pair)
								(cons (expand-pat-match-abbrev (car pair))
									  (cdr pair)))
							  *eliza-rules*)
                         :action (lambda (bindings responses)
                                   (sublis (switch-viewpoint bindings)
                                           (random-elt responses)))))
(when #f
  (interactive-interpreter (prompt-generator)
						   (compose flatten use-eliza-rules))
  )